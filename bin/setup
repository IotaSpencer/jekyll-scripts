#!/usr/bin/env ruby

require 'open3'
require 'rubygems'
require 'bundler'
require 'optparse'

def do_args
  options = {}
  path    = Pathname('.').realdirpath.find('bin/setup') do |path|
    Find.prune unless path.include? 'bin/setup'
  end
  if path
    OptionParser.new do |opts|
      opts.banner = "Usage: #{path} [options]"
      
      opts.on('-b', '--bundler', 'Install mkmatter via \'bundle install\'') do |o|
        options[:bundler] = o
      end
      opts.on('-g', '--gem', 'Install mkmatter via \'gem install --user-install mkmatter\'') do |o|
        options[:gem] = o
      end
    end.parse!
  else
    puts 'bin/setup path could not be found.'
  end

end

def show_wait_spinner(fps = 10)
  chars   = %w[| / - \\]
  delay   = 1.0 / fps
  iter    = 0
  spinner = Thread.new do
    while iter do # Keep spinning until told otherwise
      print chars[(iter += 1) % chars.length]
      sleep delay
      print "\b"
    end
  end
  yield.tap {# After yielding to the block, save the return value
    iter = false # Tell the thread to exit, cleaning up after itself…
    spinner.join # …and wait for it to do so.
  } # Use the block's return value as the method's
end

def gem_install_mkmatter
  puts "Installing mkmatter via 'gem install'"
  puts "If you would like to install 'mkmatter' to the whole system,",
       " Type 'Ctrl-C' and press 'Enter/Return' and run this command again ",
       'with sudo'
  status = nil
  show_wait_spinner {
    #stdout_and_stderr, status = Open3.capture2e('gem install --user-install mkmatter')
    sleep rand(4) + 2
  }

end

def bundle_install_mkmatter
  puts "Installing mkmatter via 'bundle install'"
  status = nil
  show_wait_spinner {
    stdout_and_stderr_str, status = Open3.capture2e('bundle install')
  }
  case status
    when 0
    
    else
  
  
  end
end

def install_micro
  puts "Installing 'micro' for text editing"
  puts 'See here for info on micro < https://micro-editor.github.io/ >'
end

def main
  options = do_args
  if options[:gem]
    gem_install_mkmatter
  elsif options[:bundler]
  end
end

# Do any other automated setup that you need to do here
